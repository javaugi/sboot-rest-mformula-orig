## YAML Template.
---
server:
  port: 8088
---
##spring:
##  datasource:
##    username: sa
##    url: jdbc:h2:mem:testdb;DB_CLOSE_ON_EXIT=FALSE
---
keycloak:
  server:
    contextPath: /auth
    adminUser:
      username: admin
      password: adminadmin
    realmImportFile: baeldung-realm.json
---
spring:
  config:
    activate:
      on-profile: david
  servlet:
    multipart:
      max-file-size: 50MB
      max-request-size: 150MB
  main:
      allow-circular-references: true
---
##spring:
##  r2dbc:
##    url: r2dbc:h2:mem:///testdb
##    username: sa
##    password:
##spring:
##  r2dbc:
##    url: r2dbc:postgresql://localhost:5432/mydb
##    username: user
##    password: pass    
##spring:
##  r2dbc:
##    url: r2dbc:mysql://localhost:3306/mydb        
---
kafka:
  topic:
    consumer: kafka.redis.consumer
    batch: kafka.redis.batch
---
spring:
  kafka:
    admin:
      enabled: true 
      fail-fast: false
      auto-create: false
    autoconfigure:
      exclude: org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration
    bootstrap-servers: 127.0.0.1:9092
    schema-registry-url: 127.0.0.1:8081
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      transaction-id-prefix: tx-
      properties:
        enable.idempotence: true
        acks: all
        retries: 3
#Exactly-Once Processing Implementation: enable.idempotence: true
#Kafka supports at-least-once delivery by default and can be configured for exactly-once processing in certain workflows.
    consumer:
      group-id: my-kafka-consumer-group
      auto-offset-reset: earliest
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "*"
    listener:
      ack-mode: MANUAL_IMMEDIATE
      concurrency: 3
    properties:        
      request.timeout.ms: 3000         # Short request timeout (3 sec)
      retry.backoff.ms: 1000           # Wait between retries (1 sec)
      reconnect.backoff.max.ms: 5000   # Max backoff for reconnects
      connections.max.idle.ms: 10000   # Close idle connections faster
      retries: 0                       # Disable retries (optional)      
##      security.protocol: SSL
##      ssl.truststore.location: /path/to/truststore.jks
##      ssl.truststore.password: ${KAFKA_TRUSTSTORE_PASSWORD}
##      ssl.keystore.location: /path/to/keystore.jks
##      ssl.keystore.password: ${KAFKA_KEYSTORE_PASSWORD}
##      ssl.key.password: ${KAFKA_KEY_PASSWORD}
##      
---
spring:
  security:
    pseudonym-key: ${PSEUDONYM_KEY:default_key}
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: https://your-auth-server.com
          jwk-set-uri: https://your-auth-server.com/.well-known/jwks.json
          audience: healthcare-api
      client:
        registration:
          my-client:
            client-id: your-client-id
            client-secret: your-client-secret
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            scope: openid,profile,email
        provider:
          my-client:
            authorization-uri: https://example.com/oauth2/authorize
            token-uri: https://example.com/oauth2/token
            user-info-uri: https://example.com/userinfo          
---
app:
  topics:
    trade-events: trading.trade.events
    file-events: trading.file.events
    audit-events: trading.audit.events
---
management:
  server:
    port: 8081
  endpoints:
    web:
      base-path: /actuator
## 
---
logging:
  level:
    org.apache.kafka: ERROR
    org.springframework.web.client.RestTemplate: DEBUG
    org.springframework.ai: DEBUG    
---
resilience4j.circuitbreaker:
  instances:
    externalService:
      registerHealthIndicator: true
      slidingWindowType: COUNT_BASED
      slidingWindowSize: 10
      failureRateThreshold: 50 # Open the circuit if 50% of calls fail
      waitDurationInOpenState: 5s # Stay open for 5 seconds
      permittedNumberOfCallsInHalfOpenState: 3 # Allow 3 calls in half-open state
      eventConsumerBufferSize: 10    
#
#
#TODO: figure out why I need this here and in bootstrap.yml
spring:
  application:
    name: testLatticeApp
---
ribbon:
  ServerListRefreshInterval: 1000
---
endpoints:
  health:
    sensitive: false
  restart:
    enabled: true
  shutdown:
    enabled: true   
---
paypal:
  client-id: your_client_id
  client-secret: your_secret
  mode: sandbox # or live
  
resilience4j:
  circuitbreaker:
    instances:
      paypalService:
        registerHealthIndicator: true
        failureRateThreshold: 50
        minimumNumberOfCalls: 5
        automaticTransitionFromOpenToHalfOpenEnabled: true
        waitDurationInOpenState: 5s
        permittedNumberOfCallsInHalfOpenState: 3
        slidingWindowSize: 10
        slidingWindowType: COUNT_BASED
  retry:
    instances:
      paypalService:
        maxAttempts: 3
        waitDuration: 500ms
        retryExceptions:
          - org.springframework.web.client.ResourceAccessException
          - com.paypal.base.exception.HttpErrorException
---
spring:
  cloud:
    gateway:
      routes:
        - id: ota-updates
          uri: http://ota-backend:8080
          predicates:
            - Path=/api/vehicles/**
          filters:
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 100
                redis-rate-limiter.burstCapacity: 200
                redis-rate-limiter.requestedTokens: 1
                key-resolver: "#{@vehicleKeyResolver}"
---
spring:
  # Example Cosmos properties (if using azure-spring-data-cosmos)
  azure:
    cosmos:
      uri: ${COSMOS_URI:}
      key: ${COSMOS_KEY:}
      database: eventsdb
eventhub:
  conn: ${EVENTHUB_CONN:}        # Event Hubs connection string
  hubName: ${EVENTHUB_NAME:}     # Event hub name
  consumerGroup: ${CONSUMER_GROUP:$Default}
