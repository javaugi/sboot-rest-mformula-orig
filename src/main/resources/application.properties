spring.cloud.compatibility-verifier.enabled=false
springdoc.api-docs.path=/v3/api-docs
application.base-url=http://localhost:8088
spring.kafka.template.default-topic=my-default-topic
spring.kafka.consumer.concurrency=3
# Number of stream threads (default is 1) - 
# Kafka Streams automatically parallelizes based on input topic partitions
# Each partition is processed independently by a single thread
# You can increase num.stream.threads to process more partitions in parallel
spring.kafka.streams.num.stream.threads=4
# Task assignment balancing
spring.kafka.streams.rack-aware.assignment.tags=zone:us-east-1a
# Base URL of your application, used for webhook listeners
npiRegistryUrl=https://npiregistry.cms.hhs.gov/api/?version=2.0
#spring.mvc.view.prefix = /WEB-INF/views/
#spring.mvc.view.suffix = .jsp
#spring.mvc.static-path-pattern=/resources/**
#JSON Web Toen properties note: jwt.secret should be at least 256 bits (32 characters when base64 encoded) for HMAC SHA-256.
jwt.secret=mySecretKeyWhichShouldBeVeryLongAndRandom123!
jwt.expiration-in-ms=3600000
jwt.expiration=90
#spring.datasource.url=jdbc:hsqldb:mem:spring5mvcjpahib
#spring.datasource.username=sa
#spring.datasource.password=
#spring.jpa.show-sql=false
#spring.jpa.hibernate.ddl-auto=update
#spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.HSQLDialect
namespace=airflow
management.endpoint.prometheus.enabled=false
management.prometheus.metrics.export.enabled=false
#management.endpoint.prometheus.access=readonly
management.endpoints.web.exposure.include=prometheus,health,metrics
management.endpoints.web.exposure.exclude=events  
management.endpoint.health.show-details=always
#Disable actuator /events endpoint
# database console config
# Configure datasource for H2
#The in-memory database remains active as long as the app is running.
#The file-based database allows external access (H2 Console).
#JDBC URL:
#    For in-memory: jdbc:h2:mem:testdb
#    For file-based: jdbc:h2:file:./data/demo2
# For PostgreSQL JSONB type
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.H2Dialect
#spring.jpa.properties.hibernate.format_sql=true
#spring.datasource.driverClassName=org.h2.Driver
#spring.jpa.database-platform=org.hibernate.dialect.H2Dialect        # For H2
#spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect    # For MySQL
#spring.jpa.database-platform=org.hibernate.dialect.HSQLDialect
# application.properties (for EclipseLink)
#spring.jpa.database-platform=org.eclipse.persistence.platform.database.MySQLPlatform
#
#
#spring.datasource.url=jdbc:h2:mem:~/data/demo2
#spring.datasource.url=jdbc:h2:file:./data/demo2 for file based
#spring.datasource.url=jdbc:h2:file:./data/demo2;AUTO_SERVER=TRUE for file based
####### you can have both spring.datasource.url and spring.r2dbc.url
#logging.level.io.r2dbc=DEBUG
#logging.level.org.springframework.r2dbc=DEBUG
#logging.level.org.springframework.data.r2dbc=DEBUG
#spring.sql.init.schema-locations=classpath:schema-h2.sql
#spring.datasource.url=jdbc:h2:file:./data/testdb;DATABASE_TO_UPPER=false;CASE_INSENSITIVE_IDENTIFIERS=TRUE
#spring.datasource.url=jdbc:h2:mem:///testdb;DATABASE_TO_UPPER=false;CASE_INSENSITIVE_IDENTIFIERS=TRUE
#spring.datasource.url=jdbc:h2:file:./data/testdb;DATABASE_TO_UPPER=false;CASE_INSENSITIVE_IDENTIFIERS=TRUE
#spring.datasource.username=sa
#spring.datasource.password=
#
#spring.sql.init.platform=h2
#spring.sql.init.mode=never
# \u2705 JDBC for H2 Console, Flyway and JDBC-based tools (JDBD only if needed)
# \u2705 SQL Initialization if needed
#DBeaver URL    =jdbc:h2:tcp://localhost:9092/~/testdb
#               =jdbc:h2:tcp://localhost:9092/mem/testdb
#   Method 1: Using schema-${platform}.sql (Recommended)
#           (1) Create your profile-specific schema files: schema-h2.sql
#           (2) Configure application.properties (or application.yml) with profiles: 
# spring.sql.init.platform is set, Spring Boot automatically looks for schema-${platform}.sql and 
#   data-${platform}.sql files in addition to the generic schema.sql and data.sql. This is the 
#   cleanest way to handle platform-specific DDL/DML.
# \u2705 JDBC repositories
#   spring.datasource.url=jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE;AUTO_SERVER=TRUE
#   spring.datasource.url=jdbc:h2:file:./data/testdb for file based
# \u2705 R2DBC for reactive repositories
#   r2dbc:h2:mem:///testdb        # In-memory
#   r2dbc:h2:file:///./data/testdb   # File-based
#   r2dbc:h2:tcp://localhost/testdb # TCP server
# \u2705 R2DBC for windows users
#spring.r2dbc.url=r2dbc:h2:file:///C:/path/to/data/testdb
#spring.r2dbc.url=r2dbc:h2:file:///C:\\path\\to\\data\\testdb
spring.r2dbc.initialize=false
spring.r2dbc.h2url=r2dbc:h2:mem:///C:/Users/javau/dev/data/testdb 
#;DATABASE_TO_UPPER=false;CASE_INSENSITIVE_IDENTIFIERS=TRUE
#spring.r2dbc.h2url=r2dbc:h2:file:./data/testdb;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=false;CASE_INSENSITIVE_IDENTIFIERS=TRUE
#spring.r2dbc.h2url=r2dbc:h2:mem:///testdb;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=false;CASE_INSENSITIVE_IDENTIFIERS=TRUE
###############
spring.datasource.url=jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE;AUTO_SERVER=TRUE
spring.datasource.username=sa
spring.datasource.password=
spring.datasource.driverClassName=org.h2.Driver
# Enable H2 console
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console
#
#spring.jpa.hibernate.ddl-auto Property: This property controls Hibernate's schema generation behavior. Common values are:
#none: No schema generation (Hibernate expects the schema to exist).
#validate: Hibernate validates the schema against your entities.
#update: Hibernate updates the schema to match your entities (adds missing tables/columns, but doesn't drop anything). 
#   This will tell Hibernate to update the schema if necessary, but it won't try to create the table if it already exists.
#   This is often the safest option for development.
#create: Hibernate creates the schema, dropping any existing tables. Use with caution in production!
#create-drop: Hibernate creates the schema when the application starts and drops it when the application stops. Useful for testing.
#
#spring.jpa.hibernate.ddl-auto=none 
#spring.jpa.hibernate.ddl-auto=validate 
#spring.jpa.hibernate.ddl-auto=update 
#spring.jpa.hibernate.ddl-auto=create 
spring.jpa.hibernate.ddl-auto=create-drop  # Hibernate creates the schema when the application starts and drops it when the application stops. Useful for testing.
spring.jpa.defer-datasource-initialization=true
#spring.jpa.defer-datasource-initialization=true
#spring.datasource.driver-class-name=org.hsqldb.jdbcDriver
#spring.datasource.driver-class-name=org.hsqldb.jdbc.JDBCDriver 
#spring.datasource.url=jdbc:hsqldb:hsql://localhost/testdb  
#spring.jpa.hibernate.ddl-auto=none  #This ensures Liquibase handles all schema changes, while Hibernate just validates that the schema matches your entities.
spring.liquibase.should-run=false
spring.liquibase.enabled=false
spring.liquibase.change-log=classpath:db/changelog/db.changelog-master.yaml
spring.flyway.enabled=false
spring.flyway.locations=classpath:db/migration
spring.flyway.baseline-on-migrate=true
############### PostgreSQL
#spring.jpa.hibernate.ddl-auto=validate
#spring.datasource.ps.url=jdbc:postgresql://localhost:5433/algotdb
#spring.datasource.ps.username=postgres
#spring.datasource.ps.password=admin
#spring.datasource.ps.driverClassName=org.postgresql.Driver
#spring.jpa.properties.hibernate.format_sql=true
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
#spring.datasource.use=postgres
#spring.liquibase.change-log=classpath:db_changelog/changelog-master.xml
#spring.liquibase.change-log=classpath:db/changelog/db.changelog-master.yaml
#spring.mvc.view.prefix = /WEB-INF/views/
#spring.mvc.view.suffix = .jsp
#spring.mvc.static-path-pattern=/resources/**

# spring.datasource.url= jdbc:mysql://localhost:3306/learn_spring_mvc_with_real_apps
# spring.datasource.username=root
# spring.datasource.password=123456
#
#server.port=9596

# EMBEDDED SERVER CONFIGURATION (ServerProperties)
#server.compression.enabled=false # If response compression is enabled.
#server.context-path= # Context path of the application.
#server.display-name=application # Display name of the application.
#server.error.include-stacktrace=never # When to include a "stacktrace" attribute.
#server.error.path=/error # Path of the error controller.
#server.error.whitelabel.enabled=true # Enable the default error page displayed in browsers in case of a server error.
#server.port=8080 # Server HTTP port.
#server.server-header= # Value to use for the Server response header (no header is sent if empty)
#server.servlet-path=/ # Path of the main dispatcher servlet.
#
## SSL EMBEDDED SERVER CONFIGURATION (ServerProperties)
#server.ssl.ciphers= # Supported SSL ciphers.
#server.ssl.client-auth= # Whether client authentication is wanted ("want") or needed ("need"). Requires a trust store.
#server.ssl.enabled= # Enable SSL support.
#server.ssl.enabled-protocols= # Enabled SSL protocols.
#server.ssl.key-alias= # Alias that identifies the key in the key store.
#server.ssl.key-password= # Password used to access the key in the key store.
#server.ssl.key-store= # Path to the key store that holds the SSL certificate (typically a jks file).
#server.ssl.key-store-password= # Password used to access the key store.
#server.ssl.key-store-provider= # Provider for the key store.
#server.ssl.key-store-type= # Type of the key store.
#server.ssl.protocol=TLS # SSL protocol to use.
#server.ssl.trust-store= # Trust store that holds SSL certificates.
#server.ssl.trust-store-password= # Password used to access the trust store.
#server.ssl.trust-store-provider= # Provider for the trust store.
#server.ssl.trust-store-type= # Type of the trust store.
#
## EMBEDDED JETTY SERVER CONFIGURATION (ServerProperties)
#server.jetty.acceptors= # Number of acceptor threads to use.
#server.jetty.max-http-post-size=0 # Maximum size in bytes of the HTTP post or put content.
#server.jetty.selectors= # Number of selector threads to use.
#
## EMBEDDED TOMCAT SERVER CONFIGURATION (ServerProperties)
#server.tomcat.accept-count= # Maximum queue length for incoming connection requests when all possible request processing threads are in use.
#server.tomcat.accesslog.directory=logs # Directory in which log files are created. Can be relative to the tomcat base dir or absolute.
#server.tomcat.accesslog.enabled=false # Enable access log.
#server.tomcat.basedir= # Tomcat base directory. If not specified a temporary directory will be used.
#server.tomcat.max-connections= # Maximum number of connections that the server will accept and process at any given time.
#server.tomcat.max-threads=0 # Maximum amount of worker threads.
#server.tomcat.uri-encoding=UTF-8 # Character encoding to use to decode the URI.
#server.tomcat.additional-tld-skip-patterns=*.jar
#
mbassador.async.enabled=true
# Thread pool configuration (for async handling)
mbassador.async.threads.core=4
mbassador.async.threads.max=8
mbassador.async.queue-capacity=10000
#
#spring.kafka.bootstrap-servers=127.0.0.1:9092
#spring.kafka.schema-registry-url=http://localhost:8081
#spring.kafka.consumer.group-id=my-group
#spring.kafka.consumer.auto-offset-reset=earliest
#spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
#spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
#spring.kafka.admin.fail-fast=false
#spring.kafka.admin.auto-create=false
#spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration
#spring.kafka.admin.enabled=false
#
# Actuator configuration
management.endpoints.web.exposure.include=health,metrics,events
management.endpoint.health.show-details=always
# Custom endpoint
management.endpoint.events.enabled=true
#
logging.level.org.hibernate=DEBUG
logging.level.org.springframework.orm.jpa=DEBUG
#
#spring.data.mongodb.uri=disabled
############################
app.name=jvidia-saas
app.mongodb.conn.name=mongodb_conn_loc_101
app.mongodb.enabled=false
app.mongodb.uri=mongodb://localhost:27017
spring.redis.enabled=false
spring.data.redis.port=6379
spring.data.redis.host=localhost
spring.data.redis.password=sa
spring.data.redis.ssl.enabled=false
spring.redis.abortConnect=false
spring.cache.type= redis
spring.cache.redis.cache_null_values = 'false'
spring.cache.redis.use_key_prefix = 'true'
spring.cache.redis.time_to_live = 600000
spark.home=E:/spark-3.5.5-bin-hadoop3
spark.master.uri=spark://localhost:7077
spark.master.port=7077
###########################
## http://localhost:7474/browser built-in workbench application
app.neo4j.enabled=false
spring.neo4j.uri=bolt://localhost:7687
spring.neo4j.authentication.username=neo4j
spring.neo4j.authentication.password=secret
spring.graphql.graphiql.enabled=true
spring.main.allow-bean-definition-overriding=true
###########################
# This will enable GraphiQL at the path /graphiql by default. You can change this path by configuring spring.graphql.graphiql.path.
#dl openai key from https://platform.openai.com/api-keys  https://platform.openai.com/account/api-keys
spring.ai.openai.uri=https://api.openai.com/v1/chat/completions
spring.ai.openai.api-key=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
spring.ai.openai.chat.api-key=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
langchain4j.open-ai.client.api-key=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
application.openai.url=https://api.openai.com/v1/chat/completions
application.openai.key=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
openai.api.model=gpt-3.5-turbo
spring.application.name=spring-openai
# deepseek key from https://platform.deepseek.com/api_keys https://api-docs.deepseek.com/
# app.deepseek.base_url=https://api.deepseek.com/v1  or https://api.deepseek.com/chat/completions
DEEPSEEK_API_KEY=sk-7415bcd6908d4894bc6eacae5f8884e4
DEEPSEEK_BASE_URL=https://api.deepseek.com
DEFAULT_DEEPSEEK_MODEL=deepseek-chat
#spring.ai.deepseek.openai.api-key=sk-258df0f85ebf4afbb9f37ab96d37dfc0  (this is old one)
spring.ai.deepseek.openai.api-key=sk-7415bcd6908d4894bc6eacae5f8884e4
spring.ai.deepseek.openai.base-url=https://api.deepseek.com/v1/chat/completions
spring.ai.deepseek.openai.chat.options.model=deepseek-chat
spring.ai.deepseek.openai.chat.options.temperature=0.7
# The DeepSeek API doesn't support embeddings, so we need to disable it.
spring.ai.openai.embedding.enabled=false
#
langchain4j.openai.api-key=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
###########################
# Stripe Secret Key (NEVER expose this in client-side code!)
stripe.api.secret-key=sk_test_YOUR_STRIPE_SECRET_KEY
# Stripe Webhook Secret (used to verify webhook signatures)
stripe.webhook.secret=whsec_YOUR_WEBHOOK_SECRET
stripe.api.secret-key=sk_test_YOUR_STRIPE_SECRET_KEY # Replace with your actual test key
stripe.webhook.secret=whsec_YOUR_WEBHOOK_SECRET # Replace with your actual webhook secret
payment.stripe.vault.stripe.api-key=sk_test_YOUR_STRIPE_SECRET_KEY
vault.stripe.api-key=sk_test_YOUR_STRIPE_SECRET_KEY
###########################     GCP Pub/Sub Configuration
# Your Google Cloud Project ID.
# The Spring Cloud GCP starter will automatically use this project for Pub/Sub operations.
# Make sure to replace 'your-gcp-project-id' with your actual project ID.
#
#spring.cloud.gcp.project-id=your-gcp-project-id
#
# Custom properties for our application
# We'll use these in our code to reference the topic and subscription names.
# Ensure these names match what you created in your GCP project.
#
#app.pubsub.topic-name=my-cool-topic
#app.pubsub.subscription-name=my-cool-subscription
spring.main.web-application-type=reactive